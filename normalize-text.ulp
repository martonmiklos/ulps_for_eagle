#usage "<b>Normalize silkscreen text sizes</b><HR>\n"
       "<p>This ULP program smashes all texts on the silkscreen layers. It then normalizes the "
       "texts so that they all have the same size and thickness. Ratio is calculated from "
       "the desired thickness.</p>"
       "<author>Author: Tennessee Carmel-Veilleux (veilleux@ameth.org)</author>"

/****************************************************************************************
*                                                                                       *
*   Normalize silkscreen text sizes                                                     *
*                                                                                       *
*   Filename: normalize-text.ulp                                                        *
*   Version: 1.0                                                                        *
*   Author: Tennessee Carmel-Veilleux <veilleux@ameth.org>                             *
*   Date: March 31st 2005                                                               *
*   Company: Entreprises Ten Tech                                                       *
*                                                                                       *                                                                                       *
*   This ULP program smashes all texts on the silkscreen layers. It then normalizes the *
*   texts so that they all have the same size and thickness. Ratio is calculated from   *
*   the desired thickness.                                                              *
*                                                                                       *
****************************************************************************************/

#require 5.0300;

#include "IniFile.ulp"
#include "useful-routines.ulp"


//string VERSION = "1.1";  // 2008-11-07 alf@cadsoft.de
string VERSION = "1.3";  // 2017-10-11 martonmiklosqdev@gmail.com

string GetIniFileName(void)
{
    return filesetext(argv[0], ".ini");
}



int result = 0; // Dialog result

string str; // Temporary string
string cmd = "SET UNDO_LOG OFF;\n"; // Script command to execute
real text_size = 40.0; // Text size for all texts
real text_thickness = 8.0; // Text thickness for all texts
int text_ratio; // Calculated text ratio

int silk_screen_layers[] = {LAYER_TPLACE, LAYER_BPLACE, LAYER_TNAMES,
                            LAYER_BNAMES, LAYER_TVALUES, LAYER_BVALUES,
                            LAYER_TDOCU, LAYER_BDOCU, 125, 126 };
                            // 2008-11-07 Layer 125, 126 is created by panalize.ulp.
                            
int process_tPlace = INI_GetInteger(strlwr(get_ulp_name()), "process_tPlace", 1, GetIniFileName());
int process_bPlace = INI_GetInteger(strlwr(get_ulp_name()), "process_tPlace", 1, GetIniFileName());
int process_tNames = INI_GetInteger(strlwr(get_ulp_name()), "process_tNames", 1, GetIniFileName());
int process_bNames = INI_GetInteger(strlwr(get_ulp_name()), "process_bNames", 1, GetIniFileName());
int process_tValues = INI_GetInteger(strlwr(get_ulp_name()), "process_tValues", 1, GetIniFileName());
int process_bValues = INI_GetInteger(strlwr(get_ulp_name()), "process_bValues", 1, GetIniFileName());
int process_tDocu = INI_GetInteger(strlwr(get_ulp_name()), "process_tDocu", 1, GetIniFileName());
int process_bDocu = INI_GetInteger(strlwr(get_ulp_name()), "process_bDocu", 1, GetIniFileName());
int process_tNames_panelize = INI_GetInteger(strlwr(get_ulp_name()), "process_tNames_panelize", 1, GetIniFileName());
int process_bNames_panelize = INI_GetInteger(strlwr(get_ulp_name()), "process_bNames_panelize", 1, GetIniFileName());

enum {UNIT_MIL, UNIT_MM, UNIT_PERCENTAGE};
int  fontSizeUnit = INI_GetInteger(strlwr(get_ulp_name()), "font_size_unit", UNIT_MIL, GetIniFileName());
if (fontSizeUnit > UNIT_MM)
    fontSizeUnit = UNIT_MIL;

int  lastunit = fontSizeUnit;

int  fontWeightUnit = INI_GetInteger(strlwr(get_ulp_name()), "font_weight_unit", UNIT_PERCENTAGE, GetIniFileName());
if (fontWeightUnit > UNIT_PERCENTAGE)
    fontWeightUnit = UNIT_PERCENTAGE;
int  lastFontWeightUnit = fontWeightUnit;

text_size = INI_GetInteger(strlwr(get_ulp_name()), "text_size", 1.0, GetIniFileName());
text_thickness = INI_GetInteger(strlwr(get_ulp_name()), "text_thickness", 0.1, GetIniFileName());;
enum {LEAVE_FONT_AS_IS, SET_VECTOR_FONT, SET_PROPORTIONAL_FONT, SET_FIXED_FONT};
string fontTypeOptions[] = { "Leave as is", "Vector", "Proportional", "Fixed" };

int selectedFontType =  INI_GetInteger(strlwr(get_ulp_name()), "font_type", LEAVE_FONT_AS_IS, GetIniFileName());
if (selectedFontType > SET_FIXED_FONT)
    selectedFontType = LEAVE_FONT_AS_IS;

string fontSizeUnitOptions[] = {"mil", "mm"};
string fontWeightUnitOptions[] = {"mil", "mm", "%"};

int   visibleLayer[];
int   actualvisible = 0;


/* ------------- UTILITY FUNCTIONS --------------- */

//
// Redisplays the layers that were visible when the ULP was started
//

void ResetVisible(UL_BOARD B) {
    sprintf(str, "DISP NONE;\nDISP ");
    cmd += str;
    B.layers(L) {
        if (L.visible) {
            sprintf(str, "%d ", L.number);
            cmd += str;
        }
    }
    cmd += ";\n";
}


//
// Returns 1 if a layer is a silkscreen layer
//
int SilkScreenText(int layer) {
    int i = 0;
    int found = 0;
    
    switch (layer) {
    case LAYER_TPLACE: if (!process_tPlace) return 0; break;
    case LAYER_BPLACE: if (!process_bPlace) return 0; break;
    case LAYER_TNAMES: if (!process_tNames) return 0; break;
    case LAYER_BNAMES: if (!process_bNames) return 0; break;
    case LAYER_TVALUES: if (!process_tValues) return 0; break;
    case LAYER_BVALUES: if (!process_bValues) return 0; break;
    case LAYER_TDOCU: if (!process_tDocu) return 0; break;
    case LAYER_BDOCU: if (!process_bDocu) return 0; break;
    case 125: if (!process_tNames_panelize) return 0; break;
    case 126: if (!process_bNames_panelize) return 0; break;
    }
    
    do {    // 2008-11-07
      if (layer == silk_screen_layers[i]) {
        found = 1;
        if (actualvisible != layer) { // display only the layer with text to change
                                      // in a script can not select texts by thew same coodiante
          sprintf(str, "DISPLAY NONE %d;\n", layer);
          cmd += str;
        }
        break;
      }
      i++;
    } while(silk_screen_layers[i]);

    return found;
}

//
// Resizes a text element to the specified size and ratio
//
void ProcessText(UL_TEXT T, real size, int ratio, int action) {
    if (SilkScreenText(T.layer)) {
        switch (fontSizeUnit) {
            case UNIT_MIL:
                sprintf(str,"CHANGE SIZE %.4f (%.4f %.4f);\nCHANGE RATIO %d (%.4f %.4f);\n",
                        size, u2mil(T.x), u2mil(T.y), ratio, u2mil(T.x), u2mil(T.y));
                break;
            case UNIT_MM:
                sprintf(str,"CHANGE SIZE %.4f (%.4f %.4f);\nCHANGE RATIO %d (%.4f %.4f);\n",
                        size, u2mm(T.x), u2mm(T.y), ratio, u2mm(T.x), u2mm(T.y));
                break;
        }
        cmd += str;
        
        string font = "";
        switch (action) {
        case LEAVE_FONT_AS_IS:
            return;
        case SET_FIXED_FONT:
            font = "FIXED";
            break;
        case SET_PROPORTIONAL_FONT:
            font = "PROPORTIONAL ";
            break;
        case SET_VECTOR_FONT:
            font = "VECTOR";
            break;
        }
        switch (fontSizeUnit) {
            case UNIT_MIL:
                sprintf(str,"CHANGE FONT %s (%.4f %.4f);\n",
                        font, u2mil(T.x), u2mil(T.y));
                break;
            case UNIT_MM:
                sprintf(str,"CHANGE FONT %s (%.4f %.4f);\n",
                        font, u2mm(T.x), u2mm(T.y));
                break;
        }
        
        cmd += str;
    }
}

//
// Smashes all parts that have an associated package on the board and resize
// all text to SIZE and RATIO.
//
void ProcessTexts(real size, int ratio) {
    // Display the origins of components
    switch (fontSizeUnit) {
        case UNIT_MIL:
            sprintf(str,"GRID MIL 1;\n");
            break;
        case UNIT_MM:
            sprintf(str,"GRID MM 0.1;\n");
            break;
    }
    cmd += str;

    cmd += "DISPLAY NONE 23 24;\n";

    board(B) {
        B.elements(E) {
            if (E.package) {
                // Smash the package to make sure text is CHANGE-able
                sprintf(str,"SMASH %s;\n", E.name);
                cmd += str;
                // Change smashed texts
                E.texts(T) {
                    ProcessText(T, size, ratio, selectedFontType);
                }

                // Change unsmashed texts
                E.package.texts(T) {
                    ProcessText(T, size, ratio, selectedFontType);
                }
            }
        }

        // Change all manually-added texts
        B.texts(T) {
            ProcessText(T, size, ratio, selectedFontType);
        }

        ResetVisible(B);
    }
    cmd += "GRID LAST;\nSET UNDO_LOG ON;\n";
}

/* ------------- MAIN ROUTINE --------------- */
if (board) {
    int actsize;
    result = dlgDialog("Normalize silkscreen text sizes") {
        sprintf(str,"<qt><H3><P>Normalize silkscreen text sizes %s</P></H3>"+
                    "<P><B>By Tennessee Carmel-Veilleux (veilleux@ameth.org)</B></P>"+
                    "<HR><P>This ULP normalizes all the text on the silkscreen layers to "+
                    "the specified size and thickness. The ratio is automatically calculated " +
                    "from the size and thickness.</P></qt>", VERSION);
        dlgLabel(str);

        dlgTabWidget {
            dlgTabPage("Options") {
                // Options
                dlgHBoxLayout {
                    dlgSpacing(20);
                    
                    dlgGridLayout {
                        dlgCell(0,0) dlgLabel("Text size:");
                        dlgCell(0,1) dlgRealEdit(text_size,0.1,2000.0);
                        dlgCell(0,2) dlgComboBox(fontSizeUnitOptions, fontSizeUnit) {
                            if (lastunit != fontSizeUnit) {
                                actsize = text_size*10000;    // 2008-11-07 calculate the value in changed unit
                                text_size = u2mil(actsize);
                                actsize = text_thickness*10000;
                                text_thickness = u2mil(actsize);
                                lastunit = fontSizeUnit;
                            }
                        }

                        dlgCell(1,0) dlgLabel("Text Thickness:");
                        dlgCell(1,1) dlgRealEdit(text_thickness,0.01,500.0);
                        dlgCell(1,2) dlgComboBox(fontWeightUnitOptions, fontWeightUnit) {
                            if (lastFontWeightUnit != fontWeightUnit) {
                                actsize = text_size*10000;    // 2008-11-07 calculate the value in changed unit
                                text_size = u2mil(actsize);
                                actsize = text_thickness*10000;
                                text_thickness = u2mil(actsize);
                                lastFontWeightUnit = fontWeightUnit;
                            }
                        }
                        
                        dlgCell(2,0) dlgLabel("Text type:");
                        dlgCell(2,1) dlgComboBox(fontTypeOptions, selectedFontType);
                    }
                }
            }
            dlgTabPage("Layers") {
                dlgHBoxLayout {
                    /*
                    int silk_screen_layers[] = {LAYER_TPLACE, LAYER_BPLACE, LAYER_TNAMES,
                            LAYER_BNAMES, LAYER_TVALUES, LAYER_BVALUES,
                            LAYER_TDOCU, LAYER_BDOCU, 125, 126 };
                            // 2008-11-07 Layer 125, 126 is created by panalize.ulp.*/
                    dlgGridLayout {
                        dlgCell(0,0) dlgCheckBox("tPlace", process_tPlace);
                        dlgCell(1,0) dlgCheckBox("bPlace", process_bPlace);
                        dlgCell(2,0) dlgCheckBox("tNames", process_tNames);
                        dlgCell(3,0) dlgCheckBox("bNames", process_bNames);
                        dlgCell(4,0) dlgCheckBox("tValues", process_tValues);
                        dlgCell(5,0) dlgCheckBox("bValues", process_bValues);
                        
                        dlgCell(0,1) dlgCheckBox("tDocu", process_tDocu);
                        dlgCell(1,1) dlgCheckBox("bDocu", process_bDocu);
                        dlgCell(2,1) dlgCheckBox("tNames by panelize.ulp (125)", process_tNames_panelize);
                        dlgCell(3,1) dlgCheckBox("bNames by panelize.ulp (126)", process_bNames_panelize);
                    }
                }
            }
        }
        

        // Buttons
        dlgHBoxLayout {
            dlgStretch(1);
            dlgPushButton("+Normalize") dlgAccept();
            dlgPushButton("-Cancel") dlgReject();
        }
    };

    if (!result) exit(0);

    if (fontWeightUnit == UNIT_PERCENTAGE) 
        text_ratio = text_thickness;
    else
        text_ratio = int(round((text_thickness / text_size) * 100.0)) + 1;

    if (text_ratio > 31) {
        text_ratio = 31;
        dlgMessageBox("!<qt><P><B>Ratio clipped to 31 !</B></P>"+
                      "<P>Make sure that text thickness is not too large for proper ratio.</P></qt>");
    }
    
    if (fontSizeUnit == UNIT_MM) {
        if (text_size > 5.0) {
            text_size = 5.0;
            dlgMessageBox("!<qt><P><B>Text size clipped to 5.0mm !</B></P></qt>");
        }
    }
    ProcessTexts(text_size, text_ratio);

    //  EditBox
    result = dlgDialog("Edit and execute script") {
        dlgHBoxLayout {
            dlgSpacing(500); // Force width of dialog to 500
        }
        dlgTextEdit(cmd);
        dlgHBoxLayout {
            dlgPushButton("+Execute") dlgAccept();
            dlgPushButton("-Cancel") dlgReject();
        }
    };

    // Execute script if it was accepted
    if (!result) {
        exit(0);
    } else {
        INI_PutInteger(strlwr(get_ulp_name()),  "font_size_unit", fontSizeUnit, GetIniFileName());
        INI_PutInteger(strlwr(get_ulp_name()),  "font_weight_unit", fontWeightUnit, GetIniFileName());
        INI_PutInteger(strlwr(get_ulp_name()),  "text_size", text_size, GetIniFileName());
        INI_PutInteger(strlwr(get_ulp_name()),  "text_thickness", text_thickness, GetIniFileName());
        INI_PutInteger(strlwr(get_ulp_name()),  "font_type", selectedFontType, GetIniFileName());
        INI_PutInteger(strlwr(get_ulp_name()),  "process_tPlace", process_tPlace, GetIniFileName());
        INI_PutInteger(strlwr(get_ulp_name()),  "process_bPlace", process_bPlace, GetIniFileName());
        INI_PutInteger(strlwr(get_ulp_name()),  "process_tNames", process_tNames, GetIniFileName());
        INI_PutInteger(strlwr(get_ulp_name()),  "process_bNames", process_bNames, GetIniFileName());
        INI_PutInteger(strlwr(get_ulp_name()),  "process_tValues", process_tValues, GetIniFileName());
        INI_PutInteger(strlwr(get_ulp_name()),  "process_bValues", process_bValues, GetIniFileName());
        INI_PutInteger(strlwr(get_ulp_name()),  "process_tDocu", process_tDocu, GetIniFileName());
        INI_PutInteger(strlwr(get_ulp_name()),  "process_bDocu", process_bDocu, GetIniFileName());
        INI_PutInteger(strlwr(get_ulp_name()),  "process_tNames_panelize", process_tNames_panelize, GetIniFileName());
        INI_PutInteger(strlwr(get_ulp_name()),  "process_bNames_panelize", process_bNames_panelize, GetIniFileName());
        exit(cmd);
    }
} else {
    dlgMessageBox(":You must run this ULP in board !");
    exit(1);
}
